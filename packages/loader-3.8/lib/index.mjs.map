{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable spaced-comment */\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../global.d.ts\" />\n\nimport '@pixi-spine/loader-base'; // Side effect install atlas loader\n// eslint-disable-next-line @typescript-eslint/no-duplicate-imports\nimport { ISpineResource, SpineLoaderAbstract } from '@pixi-spine/loader-base';\nimport type { ISkeletonParser, TextureAtlas } from '@pixi-spine/base';\nimport { AtlasAttachmentLoader, SkeletonBinary, SkeletonData, SkeletonJson } from '@pixi-spine/runtime-3.8';\n\n/**\n * @internal\n */\nclass SpineParser extends SpineLoaderAbstract<SkeletonData> {\n    createBinaryParser(): ISkeletonParser {\n        return new SkeletonBinary(null);\n    }\n\n    createJsonParser(): ISkeletonParser {\n        return new SkeletonJson(null);\n    }\n\n    parseData(parser: ISkeletonParser, atlas: TextureAtlas, dataToParse: any): ISpineResource<SkeletonData> {\n        const parserCast = parser as SkeletonBinary | SkeletonJson;\n\n        parserCast.attachmentLoader = new AtlasAttachmentLoader(atlas);\n\n        return {\n            spineData: parserCast.readSkeletonData(dataToParse),\n            spineAtlas: atlas,\n        };\n    }\n}\n\nnew SpineParser().installLoader();\n"],"names":[],"mappings":";;;AAaA,MAAM,oBAAoB,mBAAkC,CAAA;AAAA,EACxD,kBAAsC,GAAA;AAClC,IAAO,OAAA,IAAI,eAAe,IAAI,CAAA,CAAA;AAAA,GAClC;AAAA,EAEA,gBAAoC,GAAA;AAChC,IAAO,OAAA,IAAI,aAAa,IAAI,CAAA,CAAA;AAAA,GAChC;AAAA,EAEA,SAAA,CAAU,MAAyB,EAAA,KAAA,EAAqB,WAAgD,EAAA;AACpG,IAAA,MAAM,UAAa,GAAA,MAAA,CAAA;AAEnB,IAAW,UAAA,CAAA,gBAAA,GAAmB,IAAI,qBAAA,CAAsB,KAAK,CAAA,CAAA;AAE7D,IAAO,OAAA;AAAA,MACH,SAAA,EAAW,UAAW,CAAA,gBAAA,CAAiB,WAAW,CAAA;AAAA,MAClD,UAAY,EAAA,KAAA;AAAA,KAChB,CAAA;AAAA,GACJ;AACJ,CAAA;AAEA,IAAI,WAAA,GAAc,aAAc,EAAA"}